<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
    Copyright 2014-2022 Bloomreach B.V. (https://www.bloomreach.com)

    Licensed under the Apache License, Version 2.0 (the  "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS"
    BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<document>
  <properties>
    <title>External Document Field Picker - Developer's How-to: Document Field Flat List Picker</title>
  </properties>
  <body>
    <section name="Developer's How-to: Document Field Flat List Picker">

      <subsection name="Configuring Field in Document Type Definition">
        <p>
          You should add a custom field configuration like the following example in YAML format.
          This is an example with <code>ExampleExternalDocumentServiceFacade</code> having embedded external
          JSON data in a classpath resource:
        </p>
          <source><![CDATA[
/hippo:namespaces/mynamespace/mydocumenttype:
  /hipposysedit:nodetype:
    /hipposysedit:nodetype:
      ...
      /relatedextdocselector:
        jcr:primaryType: hipposysedit:field
        hipposysedit:mandatory: false
        // flag indicating whether the data is saved by the facade implementation as single or multiple string
        hipposysedit:multiple: true
        hipposysedit:ordered: false
        // property name to store the external document IDs. In this case, same as example.external.docs.field.name below.
        hipposysedit:path: exdocpickerbasedemo:relatedexdocids
        hipposysedit:primary: false
        hipposysedit:type: String
      ...
  /editor:templates:
    /_default_:
      ...
      /relatedextdocselector:
        jcr:primaryType: frontend:plugin
        caption: Related External Documents
        engine: ${engine}
        mode: ${mode}
        wicket.id: ${cluster.id}.left.item
        wicket.model: ${wicket.model}

        // Plugin class configuration for Flat List View dialog option.
        plugin.class: org.onehippo.forge.exdocpicker.impl.field.ExternalDocumentFieldSelectorPlugin
        // Item selection mode plugin parameter: single or multiple
        selection.mode: multiple
        // ExternalDocumentServiceFacade class FQN plugin parameter
        external.document.service.facade: org.onehippo.forge.exdocpicker.demo.field.ExampleExternalDocumentServiceFacade

        // Facade configuration: physical document node property name to store the external document IDs.
        example.external.docs.field.name: exdocpickerbasedemo:relatedexdocids

        /cluster.options:
          jcr:primaryType: frontend:pluginconfig
        ]]></source>

      </subsection>

      <subsection name="Implementing your ExternalDocumentServiceFacade class">
        <p>
          See an example <code>ExternalDocumentServiceFacade</code> implementation code here:
          <a href="https://github.com/bloomreach-forge/external-document-picker/tree/master/demo/cms/src/main/java/org/onehippo/forge/exdocpicker/demo/field/ExampleExternalDocumentServiceFacade.java">
            https://github.com/bloomreach-forge/external-document-picker/tree/master/demo/cms/src/main/java/org/onehippo/forge/exdocpicker/demo/field/ExampleExternalDocumentServiceFacade.java
          </a>
        </p>
        <p>
          Put your own implementation class in your CMS module project.
        </p>
        <p>
          See <a href="../apidocs/index.html">Javadocs</a> for detail about the <code>ExternalSearchServiceFacade</code>.
        </p>
      </subsection>

      <subsection name="Plugin Parameters">
        <p>
          You may configure the following plugin parameters in the field definition of your document template definition (a.k.a 'namespace').
        </p>
        <table>
          <tr>
            <th>Parameter name</th>
            <th>Description</th>
            <th>Example value(s)</th>
            <th>Default value(s)</th>
          </tr>
          <tr>
            <td>caption</td>
            <td>Field caption, used as field label and dialog title.</td>
            <td>"Introductory Blog Article"</td>
            <td>"Related external documents"</td>
          </tr>
          <tr>
            <td>external.document.service.facade</td>
            <td><code>org.onehippo.forge.exdocpicker.api.ExternalDocumentServiceFacade</code> implementation class FQN.</td>
            <td>"org.onehippo.forge.exdocpicker.demo.field.ExampleExternalDocumentServiceFacade"</td>
            <td></td>
          </tr>
          <tr>
            <td>external.documents.container.visible</td>
            <td>
              Whether or not to show the currently selected external document items in the plugin.
              <br/>
              Note: In some use cases, the facade implementation may choose to creates other compound or link fields
              in the document, without having to show the selected items by itself.
            </td>
            <td>false</td>
            <td>true</td>
          </tr>
          <tr>
            <td>selection.mode</td>
            <td>
              External document selection mode. Either 'single' or 'multiple'.
              If this is 'single', then users can select only one external document item in the UI.
              Otherwise, users can select multiple external document items.
            </td>
            <td>
              "single" or
              <br/>
              "multiple"
            </td>
            <td>"multiple"</td>
          </tr>
          <tr>
            <td>dialog.size</td>
            <td>The size of the picker popup dialog.</td>
            <td>"width=600,height=400"</td>
            <td>"width=835,height=650"</td>
          </tr>
          <tr>
            <td>initial.search.enabled</td>
            <td>Flag whether the popup dialog box will search external documents initially when opening up.</td>
            <td>true</td>
            <td>false</td>
          </tr>
          <tr>
            <td>initial.search.query</td>
            <td>
              Search query string or search term when the initial search is made in the dialog box when opening up
              if <code>initial.search.enabled</code> is set to true.
              <br/><br/>
              <em>Note: it's up to the <code>ExternalDocumentServiceFacade</code> implementation to determine how to deal with the search query argument.</em>
            </td>
            <td>"*"</td>
            <td>""</td>
          </tr>
          <tr>
            <td>page.size</td>
            <td>The page size (item count per page) in the popup dialog.</td>
            <td>10</td>
            <td>5</td>
          </tr>
          <tr>
            <td>icon.style</td>
            <td>Optional style attribute for the icon image in the dialog.</td>
            <td>"WIDTH: 40px; HEIGHT: 40px"</td>
            <td></td>
          </tr>
        </table>
      </subsection>

      <subsection name="Plugin Specific Parameters of ExampleExternalDocumentServiceFacade">
        <p>
          The following parameters are set for the <code>ExampleExternalDocumentServiceFacade</code> implementation
          additionally.
        </p>
        <table>
          <tr>
            <th>Parameter name</th>
            <th>Description</th>
            <th>Example value(s)</th>
            <th>Default value(s)</th>
          </tr>
          <tr>
            <td>example.external.docs.field.name</td>
            <td>The physical node property name to read from or store to when selection an external document.</td>
            <td>exdocpickerbasedemo:relatedexdocids</td>
            <td></td>
          </tr>
        </table>
      </subsection>

    </section>
  </body>
</document>
